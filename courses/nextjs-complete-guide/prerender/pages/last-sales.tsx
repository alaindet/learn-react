import { InferGetStaticPropsType } from 'next';
import { useEffect, useState } from 'react';

interface Sale {
  id: number;
  date: string; // 2022-10-26T06:49:39.342Z
  username: string;
  volume: number;
}

const SALES_URL = 'http://localhost:4242/sales';

/**
 * This page gets generated by the server and cached for 1 minute
 * Plus,
 */
export default function LastSalesPage({
  lastSales,
}: InferGetStaticPropsType<typeof getStaticProps>) {

  const [sales, setSales] = useState<any[]>(lastSales ?? []);

  // TODO: Use useReducer?
  const [reqError, setReqError] = useState<any>(lastSales ? null : 'Cannot fetch data');
  const [reqLoading, setReqLoading] = useState(false);
  const [reqCount, setReqCount] = useState(0);

  useEffect(() => {
    async function getLastSales() {
      setReqError(null);
      setReqLoading(true);

      try {
        const res = await fetch(SALES_URL);
        const lastSales = await res.json() as Sale[];
        setSales(lastSales);
      }

      catch (err) {
        setReqError(JSON.stringify(err));
      }

      finally {
        setReqLoading(false);
      }
    }

    if (reqCount > 0) {
      getLastSales();
    }
  }, [reqCount]);

  function handleUpdateLastSales() {
    setReqCount(count => count + 1);
  }

  let content: JSX.Element;

  if (reqError) {
    content = <p>Failed to load data</p>;
  }

  else if (reqLoading) {
    content = <p>Loading...</p>;
  }

  else {
    content = (
      <>
        <button type="button" onClick={handleUpdateLastSales}>Refresh</button>
        <ul>
          {sales.map(sale => (
            <li key={sale.id}>
              {sale.username}, â‚¬{sale.volume}
            </li>
          ))}
        </ul>
      </>
    );
  }

  return (
    <>
      <h1>Last sales</h1>
      {content}
    </>
  );
}

export async function getStaticProps() {
  let lastSales: Sale[] | null = null;

  try {
    const res = await fetch(SALES_URL);
    const data = await res.json();
    lastSales = (data as Sale[]) ?? null;
  } catch (err) {
    lastSales = null;
  }

  const ONE_MINUTE = 60;
  const props = { lastSales };
  return { props, revalidate: ONE_MINUTE };
}
